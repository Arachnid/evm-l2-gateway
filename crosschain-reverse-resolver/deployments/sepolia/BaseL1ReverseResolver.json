{
  "address": "0xDf11Ca83b42F94336E50D02AF0016D5A1c866C5e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEVMVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CommandTooLong",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "InvalidReference",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ResponseLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "TooManyCommands",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extradata",
          "type": "bytes"
        }
      ],
      "name": "getStorageSlotsCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "nameCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "textCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fff073cb76bde70f30a76fbb996dd509cd773195a5fb04f010cae26329496e7",
  "receipt": {
    "to": null,
    "from": "0xDBBC2C0fe2a1D0fB4056B35a22e543bEb715E7FC",
    "contractAddress": "0xDf11Ca83b42F94336E50D02AF0016D5A1c866C5e",
    "transactionIndex": 0,
    "gasUsed": "2087308",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x779cd0929cffadeab6db1eae15d40185c57a15ded2d617db3ed8f8b6405e50cd",
    "transactionHash": "0x6fff073cb76bde70f30a76fbb996dd509cd773195a5fb04f010cae26329496e7",
    "logs": [],
    "blockNumber": 5103650,
    "cumulativeGasUsed": "2087308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAdef74372444e716C0473dEe1F9Cb3108EFa3818",
    "0x4166B7e70F14C48980Da362256D1Da9Cc8F95e13"
  ],
  "numDeployments": 1,
  "solcInputHash": "82230a92851c1800498f571d3f1bd7cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEVMVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CommandTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidReference\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ResponseLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyCommands\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extradata\",\"type\":\"bytes\"}],\"name\":\"getStorageSlotsCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"nameCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"textCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStorageSlotsCallback(bytes,bytes)\":{\"details\":\"Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\"},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1ReverseResolver.sol\":\"L1ReverseResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/EVMFetchTarget.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEVMVerifier } from './IEVMVerifier.sol';\\nimport { Address } from '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @dev Callback implementation for users of `EVMFetcher`. If you use `EVMFetcher`, your contract must\\n *      inherit from this contract in order to handle callbacks correctly.\\n */\\nabstract contract EVMFetchTarget {\\n    using Address for address;\\n\\n    error ResponseLengthMismatch(uint256 actual, uint256 expected);\\n\\n    /**\\n     * @dev Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\\n     */\\n    function getStorageSlotsCallback(bytes calldata response, bytes calldata extradata) external {\\n        bytes memory proof = abi.decode(response, (bytes));\\n        (IEVMVerifier verifier, address addr, bytes32[] memory commands, bytes[] memory constants, bytes4 callback, bytes memory callbackData) =\\n            abi.decode(extradata, (IEVMVerifier, address, bytes32[], bytes[], bytes4, bytes));\\n        bytes[] memory values = verifier.getStorageValues(addr, commands, constants, proof);\\n        if(values.length != commands.length) {\\n            revert ResponseLengthMismatch(values.length, commands.length);\\n        }\\n        bytes memory ret = address(this).functionCall(abi.encodeWithSelector(callback, values, callbackData));\\n        assembly {\\n            return(add(ret, 32), mload(ret))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4653f974a897ce78b7bc3779ba0bb7767df99add49de4f0e9089399f47bb5942\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/EVMFetcher.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEVMVerifier } from './IEVMVerifier.sol';\\nimport { EVMFetchTarget } from './EVMFetchTarget.sol';\\nimport { Address } from '@openzeppelin/contracts/utils/Address.sol';\\n\\ninterface IEVMGateway {\\n    function getStorageSlots(address addr, bytes32[] memory commands, bytes[] memory constants) external pure returns(bytes memory witness);\\n}\\n\\nuint8 constant FLAG_DYNAMIC = 0x01;\\nuint8 constant OP_CONSTANT = 0x00;\\nuint8 constant OP_BACKREF = 0x20;\\nuint8 constant OP_END = 0xff;\\n\\n/**\\n * @dev A library to facilitate requesting storage data proofs from contracts, possibly on a different chain.\\n *      See l1-verifier/test/TestL1.sol for example usage.\\n */\\nlibrary EVMFetcher {\\n    uint256 constant MAX_COMMANDS = 32;\\n    uint256 constant MAX_CONSTANTS = 32; // Must not be greater than 32\\n\\n    using Address for address;\\n\\n    error TooManyCommands(uint256 max);\\n    error CommandTooLong();\\n    error InvalidReference(uint256 value, uint256 max);\\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\n    struct EVMFetchRequest {\\n        IEVMVerifier verifier;\\n        address target;\\n        bytes32[] commands;\\n        uint256 operationIdx;\\n        bytes[] constants;\\n    }\\n\\n    /**\\n     * @dev Creates a request to fetch the value of multiple storage slots from a contract via CCIP-Read, possibly from\\n     *      another chain.\\n     *      Supports dynamic length values and slot numbers derived from other retrieved values.\\n     * @param verifier An instance of a verifier contract that can provide and verify the storage slot information.\\n     * @param target The address of the contract to fetch storage proofs for.\\n     */\\n    function newFetchRequest(IEVMVerifier verifier, address target) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = new bytes32[](MAX_COMMANDS);\\n        bytes[] memory constants = new bytes[](MAX_CONSTANTS);\\n        assembly {\\n            mstore(commands, 0) // Set current array length to 0\\n            mstore(constants, 0)\\n        }        \\n        return EVMFetchRequest(verifier, target, commands, 0, constants);\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getStatic(EVMFetchRequest memory request, uint256 baseSlot) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if(commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if(request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, 0);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getDynamic(EVMFetchRequest memory request, uint256 baseSlot) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if(commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if(request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, FLAG_DYNAMIC);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `uint256` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, uint256 el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes32` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, bytes32 el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds an `address` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, address el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, bytes memory el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, el));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `string` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, string memory el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, bytes(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a reference to a previous fetch to the current path.\\n     * @param request The request object being operated on.\\n     * @param idx The index of the previous fetch request, starting at 0.\\n     */\\n    function ref(EVMFetchRequest memory request, uint8 idx) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        if(idx > request.commands.length || idx > 31) {\\n            revert InvalidReference(idx, request.commands.length);\\n        }\\n        _addOperation(request, OP_BACKREF | idx);\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Initiates the fetch request.\\n     *      Calling this function terminates execution; clients that implement CCIP-Read will make a callback to\\n     *      `callback` with the results of the operation.\\n     * @param callbackId A callback function selector on this contract that will be invoked via CCIP-Read with the result of the lookup.\\n     *        The function must have a signature matching `(bytes[] memory values, bytes callbackData)` with a return type matching the call in which\\n     *        this function was invoked. Its return data will be returned as the return value of the entire CCIP-read operation.\\n     * @param callbackData Extra data to supply to the callback.\\n     */\\n    function fetch(EVMFetchRequest memory request, bytes4 callbackId, bytes memory callbackData) internal view {\\n        if(request.commands.length > 0 && request.operationIdx < 32) {\\n            // Terminate last command\\n            _addOperation(request, OP_END);\\n        }\\n        revert OffchainLookup(\\n            address(this),\\n            request.verifier.gatewayURLs(),\\n            abi.encodeCall(IEVMGateway.getStorageSlots, (request.target, request.commands, request.constants)),\\n            EVMFetchTarget.getStorageSlotsCallback.selector,\\n            abi.encode(request.verifier, request.target, request.commands, request.constants, callbackId, callbackData)\\n        );\\n    }\\n\\n    function _addConstant(EVMFetchRequest memory request, bytes memory value) private pure returns(uint8 idx) {\\n        bytes[] memory constants = request.constants;\\n        idx = uint8(constants.length);\\n        assembly {\\n            mstore(constants, add(idx, 1)) // Increment constant array length\\n        }\\n        constants[idx] = value;\\n    }\\n\\n    function _addOperation(EVMFetchRequest memory request, uint8 op) private pure {\\n        uint256 commandIdx = request.commands.length - 1;\\n        request.commands[commandIdx] = request.commands[commandIdx] | (bytes32(bytes1(op)) >> (8 * request.operationIdx++));\\n    }\\n}\\n\",\"keccak256\":\"0x5a6a955ebf3e6da9ce8d39e2729c35e4e800426025954a9a9777c209447ff8b4\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/IEVMVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEVMVerifier {\\n    function gatewayURLs() external view returns(string[] memory);\\n    function getStorageValues(address target, bytes32[] memory commands, bytes[] memory constants, bytes memory proof) external view returns(bytes[] memory values);\\n}\\n\",\"keccak256\":\"0x30a635309aeebbde83774010eea5e975b8e73d1932140457121eefdce7792d72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/L1ReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {EVMFetcher} from '@ensdomains/evm-verifier/contracts/EVMFetcher.sol';\\nimport {EVMFetchTarget} from '@ensdomains/evm-verifier/contracts/EVMFetchTarget.sol';\\nimport {IEVMVerifier} from '@ensdomains/evm-verifier/contracts/IEVMVerifier.sol';\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ncontract L1ReverseResolver is EVMFetchTarget, INameResolver, ITextResolver, ERC165 {\\n    using EVMFetcher for EVMFetcher.EVMFetchRequest;\\n    IEVMVerifier immutable verifier;\\n    address immutable target;\\n    uint256 constant VERSIONABLE_TEXTS_SLOT = 2;\\n    uint256 constant VERSIONABLE_NAME_SLOT = 3;\\n    uint256 constant RECORD_VERSIONS_SLOT = 4;\\n    \\n    constructor(IEVMVerifier _verifier, address _target) {\\n        verifier = _verifier;\\n        target = _target;\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n            //  return versionable_names[recordVersions[node]][node];\\n    function name(bytes32 node) public view returns (string memory) {\\n        EVMFetcher.newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n              .element(node)\\n            .getDynamic(VERSIONABLE_NAME_SLOT)\\n              .ref(0)\\n              .element(node)\\n            .fetch(this.nameCallback.selector, ''); // recordVersions\\n    }\\n\\n    function nameCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (string memory) {\\n        return string(values[1]);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) public view returns (string memory) {\\n        EVMFetcher.newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n              .element(node)\\n            .getDynamic(VERSIONABLE_TEXTS_SLOT)\\n              .ref(0)\\n              .element(node)\\n              .element(key)\\n            .fetch(this.textCallback.selector, '');\\n    }\\n\\n    function textCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (string memory) {\\n        return string(values[1]);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public override view returns (bool) {\\n        return\\n            interfaceId == type(ITextResolver).interfaceId ||\\n            interfaceId == type(INameResolver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x99abd98e4a517ecbfc9f14f970dbeec2417de4184c0996163831c2e9faf25a9d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200269a3803806200269a833981810160405281019062000037919062000156565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050506200019d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d982620000ac565b9050919050565b6000620000ed82620000cc565b9050919050565b620000ff81620000e0565b81146200010b57600080fd5b50565b6000815190506200011f81620000f4565b92915050565b6200013081620000cc565b81146200013c57600080fd5b50565b600081519050620001508162000125565b92915050565b6000806040838503121562000170576200016f620000a7565b5b600062000180858286016200010e565b925050602062000193858286016200013f565b9150509250929050565b60805160a0516124c9620001d16000396000818161031d01526105b40152600081816102fc015261059301526124c96000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780632682dd661461009757806359d1d43c146100c75780635bdaa916146100f7578063691f343114610113578063de9abe5e14610143575b600080fd5b610081600480360381019061007c919061106b565b610173565b60405161008e91906110b3565b60405180910390f35b6100b160048036038101906100ac91906112fa565b610255565b6040516100be91906113f1565b60405180910390f35b6100e160048036038101906100dc91906114a4565b61027b565b6040516100ee91906113f1565b60405180910390f35b610111600480360381019061010c919061155a565b6103ab565b005b61012d600480360381019061012891906115db565b61055a565b60405161013a91906113f1565b60405180910390f35b61015d600480360381019061015891906112fa565b610632565b60405161016a91906113f1565b60405180910390f35b60007f59d1d43c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061023e57507f691f3431000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061024e575061024d82610658565b5b9050919050565b60608260018151811061026b5761026a611608565b5b6020026020010151905092915050565b60606103a463de9abe5e60e01b6040518060200160405280600081525061039586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061038789610379600061036b600261035d8f61034f60046103417f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006106c2565b6107d190919063ffffffff16565b6108b290919063ffffffff16565b61093390919063ffffffff16565b610a1490919063ffffffff16565b6108b290919063ffffffff16565b610ad290919063ffffffff16565b610b349092919063ffffffff16565b9392505050565b600084848101906103bc9190611637565b905060008060008060008088888101906103d691906117f1565b95509550955095509550955060008673ffffffffffffffffffffffffffffffffffffffff16633baa6d508787878c6040518563ffffffff1660e01b81526004016104239493929190611b00565b600060405180830381865afa158015610440573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104699190611c7f565b905084518151146104b557805185516040517f291894250000000000000000000000000000000000000000000000000000000081526004016104ac929190611ce1565b60405180910390fd5b60006105508483856040516024016104ce929190611d0a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050503073ffffffffffffffffffffffffffffffffffffffff16610cbf90919063ffffffff16565b9050805160208201f35b606061062d632682dd6660e01b6040518060200160405280600081525061061e85610610600061060260036105f48b6105e660046105d87f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006106c2565b6107d190919063ffffffff16565b6108b290919063ffffffff16565b61093390919063ffffffff16565b610a1490919063ffffffff16565b6108b290919063ffffffff16565b610b349092919063ffffffff16565b919050565b60608260018151811061064857610647611608565b5b6020026020010151905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6106ca610fa4565b6000602067ffffffffffffffff8111156106e7576106e66110e4565b5b6040519080825280602002602001820160405280156107155781602001602082028036833780820191505090505b5090506000602067ffffffffffffffff811115610735576107346110e4565b5b60405190808252806020026020018201604052801561076857816020015b60608152602001906001900390816107535790505b50905060008252600081526040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160008152602001828152509250505092915050565b6107d9610fa4565b6000836040015190506000815190506000811180156107fc575060208560600151105b1561080d5761080c8560ff610d0b565b5b6001810182526020856040015151111561085f5760206040517f128e70080000000000000000000000000000000000000000000000000000000081526004016108569190611d41565b60405180910390fd5b6000856060018181525050610875856000610d0b565b6108a7856108a2878760405160200161088e9190611d41565b604051602081830303815290604052610db2565b610d0b565b849250505092915050565b6108ba610fa4565b60208360600151106108f8576040517fb00fd63800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61092a8361092585856040516020016109119190611d6b565b604051602081830303815290604052610db2565b610d0b565b82905092915050565b61093b610fa4565b60008360400151905060008151905060008111801561095e575060208560600151105b1561096f5761096e8560ff610d0b565b5b600181018252602085604001515111156109c15760206040517f128e70080000000000000000000000000000000000000000000000000000000081526004016109b89190611d41565b60405180910390fd5b60008560600181815250506109d7856001610d0b565b610a0985610a0487876040516020016109f09190611d41565b604051602081830303815290604052610db2565b610d0b565b849250505092915050565b610a1c610fa4565b6020836060015110610a5a576040517fb00fd63800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260400151518260ff161180610a735750601f8260ff16115b15610abc57818360400151516040517f101586e0000000000000000000000000000000000000000000000000000000008152600401610ab3929190611dce565b60405180910390fd5b610ac98383602017610d0b565b82905092915050565b610ada610fa4565b6020836060015110610b18576040517fb00fd63800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b2b83610b268585610db2565b610d0b565b82905092915050565b6000836040015151118015610b4d575060208360600151105b15610b5e57610b5d8360ff610d0b565b5b30836000015173ffffffffffffffffffffffffffffffffffffffff1663b50f2fbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bd79190611f79565b846020015185604001518660800151604051602401610bf893929190611fc2565b60405160208183030381529060405263ea9cd3bf60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050635bdaa91660e01b86600001518760200151886040015189608001518989604051602001610c709695949392919061206b565b6040516020818303038152906040526040517f556f1830000000000000000000000000000000000000000000000000000000008152600401610cb69594939291906121ed565b60405180910390fd5b6060610d03838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610def565b905092915050565b60006001836040015151610d1f9190612284565b9050826060018051809190610d33906122b8565b8152506008610d429190612300565b8260f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c83604001518281518110610d8157610d80611608565b5b60200260200101511783604001518281518110610da157610da0611608565b5b602002602001018181525050505050565b600080836080015190508051915060018201815282818360ff1681518110610ddd57610ddc611608565b5b60200260200101819052505092915050565b606082471015610e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2b906123b4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e5d9190612410565b60006040518083038185875af1925050503d8060008114610e9a576040519150601f19603f3d011682016040523d82523d6000602084013e610e9f565b606091505b5091509150610eb087838387610ebc565b92505050949350505050565b60608315610f1e576000835103610f1657610ed685610f31565b610f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0c90612473565b60405180910390fd5b5b829050610f29565b610f288383610f54565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610f675781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9b91906113f1565b60405180910390fd5b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61104881611013565b811461105357600080fd5b50565b6000813590506110658161103f565b92915050565b60006020828403121561108157611080611009565b5b600061108f84828501611056565b91505092915050565b60008115159050919050565b6110ad81611098565b82525050565b60006020820190506110c860008301846110a4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61111c826110d3565b810181811067ffffffffffffffff8211171561113b5761113a6110e4565b5b80604052505050565b600061114e610fff565b905061115a8282611113565b919050565b600067ffffffffffffffff82111561117a576111796110e4565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156111b0576111af6110e4565b5b6111b9826110d3565b9050602081019050919050565b82818337600083830152505050565b60006111e86111e384611195565b611144565b90508281526020810184848401111561120457611203611190565b5b61120f8482856111c6565b509392505050565b600082601f83011261122c5761122b6110ce565b5b813561123c8482602086016111d5565b91505092915050565b60006112586112538461115f565b611144565b9050808382526020820190506020840283018581111561127b5761127a61118b565b5b835b818110156112c257803567ffffffffffffffff8111156112a05761129f6110ce565b5b8086016112ad8982611217565b8552602085019450505060208101905061127d565b5050509392505050565b600082601f8301126112e1576112e06110ce565b5b81356112f1848260208601611245565b91505092915050565b6000806040838503121561131157611310611009565b5b600083013567ffffffffffffffff81111561132f5761132e61100e565b5b61133b858286016112cc565b925050602083013567ffffffffffffffff81111561135c5761135b61100e565b5b61136885828601611217565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113ac578082015181840152602081019050611391565b60008484015250505050565b60006113c382611372565b6113cd818561137d565b93506113dd81856020860161138e565b6113e6816110d3565b840191505092915050565b6000602082019050818103600083015261140b81846113b8565b905092915050565b6000819050919050565b61142681611413565b811461143157600080fd5b50565b6000813590506114438161141d565b92915050565b600080fd5b60008083601f840112611464576114636110ce565b5b8235905067ffffffffffffffff81111561148157611480611449565b5b60208301915083600182028301111561149d5761149c61118b565b5b9250929050565b6000806000604084860312156114bd576114bc611009565b5b60006114cb86828701611434565b935050602084013567ffffffffffffffff8111156114ec576114eb61100e565b5b6114f88682870161144e565b92509250509250925092565b60008083601f84011261151a576115196110ce565b5b8235905067ffffffffffffffff81111561153757611536611449565b5b6020830191508360018202830111156115535761155261118b565b5b9250929050565b6000806000806040858703121561157457611573611009565b5b600085013567ffffffffffffffff8111156115925761159161100e565b5b61159e87828801611504565b9450945050602085013567ffffffffffffffff8111156115c1576115c061100e565b5b6115cd87828801611504565b925092505092959194509250565b6000602082840312156115f1576115f0611009565b5b60006115ff84828501611434565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561164d5761164c611009565b5b600082013567ffffffffffffffff81111561166b5761166a61100e565b5b61167784828501611217565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116ab82611680565b9050919050565b60006116bd826116a0565b9050919050565b6116cd816116b2565b81146116d857600080fd5b50565b6000813590506116ea816116c4565b92915050565b60006116fb82611680565b9050919050565b61170b816116f0565b811461171657600080fd5b50565b60008135905061172881611702565b92915050565b600067ffffffffffffffff821115611749576117486110e4565b5b602082029050602081019050919050565b600061176d6117688461172e565b611144565b905080838252602082019050602084028301858111156117905761178f61118b565b5b835b818110156117b957806117a58882611434565b845260208401935050602081019050611792565b5050509392505050565b600082601f8301126117d8576117d76110ce565b5b81356117e884826020860161175a565b91505092915050565b60008060008060008060c0878903121561180e5761180d611009565b5b600061181c89828a016116db565b965050602061182d89828a01611719565b955050604087013567ffffffffffffffff81111561184e5761184d61100e565b5b61185a89828a016117c3565b945050606087013567ffffffffffffffff81111561187b5761187a61100e565b5b61188789828a016112cc565b935050608061189889828a01611056565b92505060a087013567ffffffffffffffff8111156118b9576118b861100e565b5b6118c589828a01611217565b9150509295509295509295565b6118db816116a0565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61191681611413565b82525050565b6000611928838361190d565b60208301905092915050565b6000602082019050919050565b600061194c826118e1565b61195681856118ec565b9350611961836118fd565b8060005b83811015611992578151611979888261191c565b975061198483611934565b925050600181019050611965565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60006119f2826119cb565b6119fc81856119d6565b9350611a0c81856020860161138e565b611a15816110d3565b840191505092915050565b6000611a2c83836119e7565b905092915050565b6000602082019050919050565b6000611a4c8261199f565b611a5681856119aa565b935083602082028501611a68856119bb565b8060005b85811015611aa45784840389528151611a858582611a20565b9450611a9083611a34565b925060208a01995050600181019050611a6c565b50829750879550505050505092915050565b600082825260208201905092915050565b6000611ad2826119cb565b611adc8185611ab6565b9350611aec81856020860161138e565b611af5816110d3565b840191505092915050565b6000608082019050611b1560008301876118d2565b8181036020830152611b278186611941565b90508181036040830152611b3b8185611a41565b90508181036060830152611b4f8184611ac7565b905095945050505050565b6000611b6d611b6884611195565b611144565b905082815260208101848484011115611b8957611b88611190565b5b611b9484828561138e565b509392505050565b600082601f830112611bb157611bb06110ce565b5b8151611bc1848260208601611b5a565b91505092915050565b6000611bdd611bd88461115f565b611144565b90508083825260208201905060208402830185811115611c0057611bff61118b565b5b835b81811015611c4757805167ffffffffffffffff811115611c2557611c246110ce565b5b808601611c328982611b9c565b85526020850194505050602081019050611c02565b5050509392505050565b600082601f830112611c6657611c656110ce565b5b8151611c76848260208601611bca565b91505092915050565b600060208284031215611c9557611c94611009565b5b600082015167ffffffffffffffff811115611cb357611cb261100e565b5b611cbf84828501611c51565b91505092915050565b6000819050919050565b611cdb81611cc8565b82525050565b6000604082019050611cf66000830185611cd2565b611d036020830184611cd2565b9392505050565b60006040820190508181036000830152611d248185611a41565b90508181036020830152611d388184611ac7565b90509392505050565b6000602082019050611d566000830184611cd2565b92915050565b611d6581611413565b82525050565b6000602082019050611d806000830184611d5c565b92915050565b600060ff82169050919050565b6000819050919050565b6000611db8611db3611dae84611d86565b611d93565b611cc8565b9050919050565b611dc881611d9d565b82525050565b6000604082019050611de36000830185611dbf565b611df06020830184611cd2565b9392505050565b600067ffffffffffffffff821115611e1257611e116110e4565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611e3e57611e3d6110e4565b5b611e47826110d3565b9050602081019050919050565b6000611e67611e6284611e23565b611144565b905082815260208101848484011115611e8357611e82611190565b5b611e8e84828561138e565b509392505050565b600082601f830112611eab57611eaa6110ce565b5b8151611ebb848260208601611e54565b91505092915050565b6000611ed7611ed284611df7565b611144565b90508083825260208201905060208402830185811115611efa57611ef961118b565b5b835b81811015611f4157805167ffffffffffffffff811115611f1f57611f1e6110ce565b5b808601611f2c8982611e96565b85526020850194505050602081019050611efc565b5050509392505050565b600082601f830112611f6057611f5f6110ce565b5b8151611f70848260208601611ec4565b91505092915050565b600060208284031215611f8f57611f8e611009565b5b600082015167ffffffffffffffff811115611fad57611fac61100e565b5b611fb984828501611f4b565b91505092915050565b6000606082019050611fd760008301866118d2565b8181036020830152611fe98185611941565b90508181036040830152611ffd8184611a41565b9050949350505050565b600061202261201d61201884611680565b611d93565b611680565b9050919050565b600061203482612007565b9050919050565b600061204682612029565b9050919050565b6120568161203b565b82525050565b61206581611013565b82525050565b600060c082019050612080600083018961204d565b61208d60208301886118d2565b818103604083015261209f8187611941565b905081810360608301526120b38186611a41565b90506120c2608083018561205c565b81810360a08301526120d48184611ac7565b9050979650505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061212982611372565b612133818561210d565b935061214381856020860161138e565b61214c816110d3565b840191505092915050565b6000612163838361211e565b905092915050565b6000602082019050919050565b6000612183826120e1565b61218d81856120ec565b93508360208202850161219f856120fd565b8060005b858110156121db57848403895281516121bc8582612157565b94506121c78361216b565b925060208a019950506001810190506121a3565b50829750879550505050505092915050565b600060a08201905061220260008301886118d2565b81810360208301526122148187612178565b905081810360408301526122288186611ac7565b9050612237606083018561205c565b81810360808301526122498184611ac7565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061228f82611cc8565b915061229a83611cc8565b92508282039050818111156122b2576122b1612255565b5b92915050565b60006122c382611cc8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122f5576122f4612255565b5b600182019050919050565b600061230b82611cc8565b915061231683611cc8565b925082820261232481611cc8565b9150828204841483151761233b5761233a612255565b5b5092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061239e60268361137d565b91506123a982612342565b604082019050919050565b600060208201905081810360008301526123cd81612391565b9050919050565b600081905092915050565b60006123ea826119cb565b6123f481856123d4565b935061240481856020860161138e565b80840191505092915050565b600061241c82846123df565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061245d601d8361137d565b915061246882612427565b602082019050919050565b6000602082019050818103600083015261248c81612450565b905091905056fea2646970667358221220afaaec86b0c7316f6c3a4bf521d82e9308f1718ef909e9b50d9b1eb48dc0b1f064736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStorageSlotsCallback(bytes,bytes)": {
        "details": "Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request."
      },
      "name(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated name."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "text(bytes32,string)": {
        "params": {
          "key": "The text data key to query.",
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated text data."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "name(bytes32)": {
        "notice": "Returns the address associated with an ENS node."
      },
      "text(bytes32,string)": {
        "notice": "Returns the text data associated with an ENS node and key."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}